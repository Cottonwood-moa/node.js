const http = require('http');
const fs = require('fs').promises;

http.createServer(async (req, res) => {
  try {
    const data = await fs.readFile('./server2.html');
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(data);
  } catch (err) {
    console.error(err);
    res.writeHead(500, { 'Content-Type': 'text/plain; charset=utf-8' });
    res.end(err.message);
  }
})
  .listen(8081, () => {
    console.log('8081번 포트에서 서버 대기 중입니다!');
  });

  /* 요청이 들어오면 먼저 fs 모듈로 HTML파일을 읽는다.
  data 변수에 저장된 버퍼를 그대로 클라이언트에 보내면 된다.
  이전 예제에서는 문자열을 보냈지만, 저렇게 버퍼를 보낼 수도 있다.
  예기치 못한 에러가 발생한 경우에는 에러 메시지를 응답한다.
  에러 메시지는 일반 문자이므로 text/plain을 사용한다.

  HTTP 상태코드
  200이나 500 같은 숫자는 HTTP 상태 코드이다. res.writeHead에 첫 번째 인수로 상태 코드를 넣었는데,
  브라우저는 서버에서 보내주는 상태 코드를 보고 요청이 성공했는지 실패했는지를 판단한다.
  여기서는 대표적인 상태 코드들을 보자.
  2XX : 성공을 알리는 상태 코드이다. 대표적으로 200(성공), 201(작성됨)이 많이 사용된다.
  3XX : 리다이렉션(다른 페이지로 이동)을 알리는 상태 코드이다. 어떤 주소를 입력했는데 다른 주소의 페이지로 넘어갈 때 이 코드가 사용된다.
  대표적으로 301(영구 이동), 302(임시 이동)가 있다. 304(수정되지 않음)는 요청의 응답으로 캐시를 사용했다는 뜻이다.
  4XX : 요청 오류를 나타낸다. 요청 자체에 오류가 있을 때 표시된다. 대표적으로 400(잘못된 요청), 401(권한 없음), 403(금지됨), 404(찾을 수 없음)가 있다.
  5XX : 서버 오류를 나타낸다. 요청은 제대로 왔지만 서버에 오류가 생겼을 때 발생한다. 이 오류는 뜨지 않게 주의해서 프로그래밍해야 한다.
  이 오류를 res.writeHead로 클라이언트에 직접 보내는 경우는 거의 없고, 예기치 못한 에러 발생 시 서버가 알아서 5XX대 코드를 보낸다.
  500(내부 서버 오류), 502(불량 게이트웨이), 503(서비스를 사용할 수 없음)이 자주 사용된다.

  ! 무조건 응답을 보내야 한다.
  요청 처리 과정 중에 에러가 발생했다고 해서 응답을 보내지 않으면 안된다. 요청이 성공했든 실패했든 응답을 클라이언트로 보내서 요청이 마무리되었음을 알려야 한다.
  응답을 보내지 않는다면, 클라이언트는 응답이 오길 하염없이 기다리다가 일정 시간 후 Timeout(시간초과) 처리한다.

  포트 번호를 8081번으로 바꿨다.
  server1을 종료했다면 8080번 포트를 계속 사용해도 된다. 하지만 종료하지 않았을 경우 server2.js가 같은 8080포트를 사용하면 에러가 발생하므로 8081번으로 바꿧다.
  이렇게 포트만 다르게 해서 동시에여러 노드 서버를 실행할 수도 있다.
  
   */