서버에 요청을 보낼 때는 주소를 통해 요청의 내용을 표현한다.
주소가 /index.html이면 서버의 index.html을 보내달라는 뜻이고, /about.html이면 about.html을 보내달라는 뜻이다.
항상 html만 요청할 필요는 없다. css나 js 또는 이미지 같은 파일을 요청할 수도 있고 특정 동작을 행하는 것을 요청할 수도 있다.
요청의 내용이 주소를 통해 표현되므로 서버가 이해하기 쉬운 주소를 사용하는 것이 좋다. 여기서 REST가 등장한다.
REST는 REpresentational State Transfer의 줄임말이며, 서버의 자원을 정의하고 자원에 대한 주소를 지정하는 방법을 가리킨다. 일종의 약속이라고 봐도 무방하다.
자원이라고 해서 꼭 파일일 필요는 없고 서버가 행할 수 있는 것들을 통틀어서 의미한다고 보면 된다. REST API에는 많은 규칙들이 있는데 모든 규칙을 지키는 것은 현실적으로 어려우므로,
기본적인 개념만 빌려 사용하자.
주소는 의미를 명확히 전달하기 위해 명사로 구성된다.
/user이면 사용자 정보에 관련된 자원을 요청하는 것이고, /post라면 게시글에 관련된 자원을 요청하는 것이라고 추측할 수 있다.
단순히 명사만 있으면 무슨 동작을 행해라는 것인지 알기 어려우므로 REST에서는 주소 외에도 HTTP 요청 메서드라는 것을 사용한다. 폼 데이터를 전송할 때 GET 또는 POST 메서드를 지정한다.
이때 GET 과 POST가 바로 요청 메서드이다. 또한 PUT, PATH, DELETE, OPTIONS 드의 메서드도 자주 사용된다.

GET : 서버 자원을 가져오고자 할 때 사용된다. 요청의 본문에 데이터를 넣지 않는다. 데이터를 서버로 보내야 한다면 쿼리스트링을 사용한다.
POST : 서버에 자원을 새로 등록하고자 할 때 사용한다. 요청의 본문에 새로 등록할 데이터를 넣어 보낸다.
PUT : 서버의 자원을 요청에 들어 있는 자원으로 치환하고자 할 때 사용한다. 요청의 본문에 치환할 데이터를 넣어 보낸다.
PATCH : 서버 자원의 일부만 수정하고자 할 때 사용한다. 요청의 본문에 일부 수정할 데이터를 넣어 보낸다.
DELETE : 서버의 자원을 삭제하고자 할 때 사용한다. 요청의 본문에 데이터를 넣지 않는다.
OPTIONS : 요청을 하기 전에 통신 옵션을 설명하기 위해 사용한다. 12장에서 자주 보게 될 것이다.

주소 하나가 요청 메서드를 여러 개 가질 수 있다.
GET 메서드의 /user 주소로 요청을 보내면 사용자 정보를 가져오는 요청이라는 것을 알 수 있고, POST 메서드의 /user 주소로 요청을 보내면 새로운 사용자를 등록하려 한다는 것을 알 수 있다.
만약 위의 메서드로 표현하기 애매한 로그인 같은 동작이 있다면 그냥 POST를 사용하면 된다.

이렇게 주소와 메서드만 보고 요청의 내용을 알아볼 수 있다는 것이 장점이다.
또한, GET 메서드 같은 경우에는 브라우저에서 캐싱(기억)할 수도 있으므로 같은 주소로 GET요청을 할 때 서버에서 가져오는 것이 아니라 캐시에서 가져올 수도 있다.
이렇게 캐싱이 되면 성능이 좋아진다.
그리고 HTTP 통신을 사용하면 클라이언트가 누구든 상관없이 같은 방식으로 서버와 소통할 수 있다. iOS, 안드로이드, 웹, 다른 서버가 모두 같은 주소로 요청을 보낼 수 있다.
즉, 서버와 클라이언트가 분리되어 있다는 뜻이다. 이렇게 서버와 클라이언트를 분리하면 추후에 서버를 확장할 때 클라이언트에 구애되지 않아 좋습니다.
이제 REST를 사용한 주소체계로 RESTful 한 웹 서버를 만들어보자.
REST를 따르는 서버를 'RESTful'하다고 표현한다. 코드를 작성하기 전에 대략적인 주소를 설계하는 것이 좋다.
주소 구조를 미리 머릿속에 정리해둔 후 코딩을 시작하면 더욱 체계적으로 프로그래밍할 수 있다.

HTTP메서드              주소                       역할
GET                     /                   restFront.html 파일 제공
GET                     /about              about.html 파일 제공
GET                     /users              사용자 목록 제공
GET                     기타                기타 정적 파일 제공
POST                    /users              사용자 등록
PUT                     /user/사용자ID       해당 ID의 사용자 수정
DELETE                  /user/사용자ID        restFront.html 파일 제공


